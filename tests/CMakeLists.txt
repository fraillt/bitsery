#MIT License
#
#Copyright (c) 2017 Mindaugas Vinkelis
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all
#copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#SOFTWARE.

cmake_minimum_required(VERSION 3.10)
project(bitsery_tests CXX)

find_package(GTest 1.10 REQUIRED)

if (NOT TARGET Bitsery::bitsery)
    message(FATAL_ERROR "Bitsery::bitsery alias not set. Please generate CMake from bitsery root directory.")
endif()

file(GLOB TestSourceFiles ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

enable_testing()

foreach (TestFile ${TestSourceFiles})
    get_filename_component(TestName ${TestFile} NAME_WE)
    set(TestName bitsery.test.${TestName})
    add_executable(${TestName} ${TestFile})
    target_link_libraries(${TestName} PRIVATE GTest::Main Bitsery::bitsery)
    if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
        target_compile_options(${TestName} PRIVATE -Wextra -Wconversion -Wno-missing-braces -Wpedantic -Weffc++ -Werror)
    endif()
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        target_compile_options(${TestName} PRIVATE -Wno-c++14-extensions)
    endif()
    gtest_discover_tests(${TestName})

#    add_test(NAME ${TestName} COMMAND $<TARGET_FILE:${TestName}>)
endforeach()

#======================= setup development environment ====================

# get all header files for IDE  (in my case Clion) and create dummy project that consumes theses files
get_directory_property(ParentDir PARENT_DIRECTORY)
if (ParentDir)
    # only include when working from root project (Bitsery)
    file(GLOB_RECURSE HeadersForIDE ${ParentDir}/include/bitsery/*.h)
    # create dummy target IDE
    file(WRITE ${CMAKE_BINARY_DIR}/dummy_for_ide.cpp "//generated by CMake to create dummy target with all includes for IDE.")
    add_library(bitsery.dummy_for_ide ${CMAKE_BINARY_DIR}/dummy_for_ide.cpp)
    # add headers so IDE correctly show them
    target_sources(bitsery.dummy_for_ide PRIVATE ${HeadersForIDE} serialization_test_utils.h)
    target_link_libraries(bitsery.dummy_for_ide PRIVATE GTest::Main Bitsery::bitsery)
endif()

# Check missing includes for each header file in include/bitsery
# We compile each header files individually to check if each header contains all required includes
# Usage:
# run from repo root directory
# > mkdir -p build && cd build
# > cmake -D BITSERY_BUILD_TESTS=1 ..
# > make check_includes
add_custom_target(check_includes)
get_directory_property(ParentDir PARENT_DIRECTORY)
if (ParentDir)
    file(GLOB_RECURSE HeaderFiles "${ParentDir}/include/bitsery/*.h")
    FOREACH (HeaderFile ${HeaderFiles})
        # message(STATUS "${HeaderFile}")
        SET(CHK_TARGET_NAME "${HeaderFile}.chk")
        STRING(REGEX REPLACE "/" "_" CHK_TARGET_NAME ${CHK_TARGET_NAME})
        STRING(REGEX REPLACE "\\." "_" CHK_TARGET_NAME ${CHK_TARGET_NAME})
        STRING(REGEX REPLACE ":" "_" CHK_TARGET_NAME ${CHK_TARGET_NAME})
        STRING(REGEX REPLACE "\\\\" "_" CHK_TARGET_NAME ${CHK_TARGET_NAME})
        add_custom_target(
            ${CHK_TARGET_NAME}
            COMMAND ${CMAKE_CXX_COMPILER} -c ${HeaderFile}
            VERBATIM
        )
        add_dependencies(check_includes ${CHK_TARGET_NAME})
    ENDFOREACH ()
endif()
